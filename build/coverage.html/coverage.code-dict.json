{"/home/travis/build/npmtest/node-npmtest-kerberos/test.js":"/* istanbul instrument in package npmtest_kerberos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-kerberos/lib.npmtest_kerberos.js":"/* istanbul instrument in package npmtest_kerberos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_kerberos = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_kerberos = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-kerberos/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-kerberos && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_kerberos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_kerberos\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_kerberos.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_kerberos.rollup.js'] =\n            local.assetsDict['/assets.npmtest_kerberos.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_kerberos.__dirname + '/lib.npmtest_kerberos.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-kerberos/node_modules/kerberos/index.js":"// Get the Kerberos library\nmodule.exports = require('./lib/kerberos');\n// Set up the auth processes\nmodule.exports['processes'] = {\n  MongoAuthProcess: require('./lib/auth_processes/mongodb').MongoAuthProcess\n}","/home/travis/build/npmtest/node-npmtest-kerberos/node_modules/kerberos/lib/kerberos.js":"var kerberos = require('../build/Release/kerberos')\n  , KerberosNative = kerberos.Kerberos;\n\nvar Kerberos = function() {\n  this._native_kerberos = new KerberosNative(); \n}\n\n// callback takes two arguments, an error string if defined and a new context\n// uri should be given as service@host.  Services are not always defined\n// in a straightforward way.  Use 'HTTP' for SPNEGO / Negotiate authentication. \n// If credentialsCache is not specified, the default credentials cache from the \n// environment will be used (ie. KRB5CCNAME).  In the case where multiple \n// credentials caches may be in use at once (such as for a server doing \n// delegation), specify the cache name here and it will be used for this \n// exchange. The credentialsCache is optional.\nKerberos.prototype.authGSSClientInit = function(uri, flags, credentialsCache, callback) {\n  if (typeof(credentialsCache) == 'function') {\n    callback = credentialsCache;\n    credentialsCache = '';\n  }\n\n  if (credentialsCache === undefined) {\n      credentialsCache = '';\n  }\n  \n  return this._native_kerberos.authGSSClientInit(uri, flags, credentialsCache, callback);\n}\n\n// This will obtain credentials using a credentials cache. To override the default\n// location (posible /tmp/krb5cc_nnnnnn, where nnnn is your numeric uid) use \n// the environment variable KRB5CNAME. \n// The credentials (suitable for using in an 'Authenticate: ' header, when prefixed\n// with 'Negotiate ') will be available as context.response inside the callback\n// if no error is indicated.\n// callback takes one argument, an error string if defined\nKerberos.prototype.authGSSClientStep = function(context, challenge, callback) {\n  if(typeof challenge == 'function') {\n    callback = challenge;\n    challenge = '';\n  }\n\n  return this._native_kerberos.authGSSClientStep(context, challenge, callback);\n}\n\nKerberos.prototype.authGSSClientUnwrap = function(context, challenge, callback) {\n  if(typeof challenge == 'function') {\n    callback = challenge;\n    challenge = '';\n  }\n\n  return this._native_kerberos.authGSSClientUnwrap(context, challenge, callback);\n}\n\nKerberos.prototype.authGSSClientWrap = function(context, challenge, user_name, callback) {\n  if(typeof user_name == 'function') {\n    callback = user_name;\n    user_name = '';\n  }\n\n  return this._native_kerberos.authGSSClientWrap(context, challenge, user_name, callback);\n}\n\n// free memory used by a context created using authGSSClientInit.\n// callback takes one argument, an error string if defined.\nKerberos.prototype.authGSSClientClean = function(context, callback) {\n  return this._native_kerberos.authGSSClientClean(context, callback);\n}\n\n// The server will obtain credentials using a keytab.  To override the \n// default location (probably /etc/krb5.keytab) set the KRB5_KTNAME\n// environment variable.\n// The service name should be in the form service, or service@host.name\n// e.g. for HTTP, use \"HTTP\" or \"HTTP@my.host.name\". See gss_import_name\n// for GSS_C_NT_HOSTBASED_SERVICE.\n//\n// a boolean turns on \"constrained_delegation\". this enables acquisition of S4U2Proxy \n// credentials which will be stored in a credentials cache during the authGSSServerStep\n// method. this parameter is optional.  The credentials will be stored in \n// a new cache, the location of which will be made available as the \"delegatedCredentialsCache\"\n// property on the returned context AFTER the authGSSServerStep stage.\n//\n// when \"constrained_delegation\" is enabled, a username can (optionally) be provided and\n// S4U2Self protocol transition will be initiated. In this case, we will not\n// require any \"auth\" data during the authGSSServerStep. This parameter is optional\n// but constrained_delegation MUST be enabled for this to work. When S4U2Self is\n// used, the username will be assumed to have been already authenticated, and no\n// actual authentication will be performed. This is basically a way to \"bootstrap\"\n// kerberos credentials (which can then be delegated with S4U2Proxy) for a user\n// authenticated externally.\n//\n// callback takes two arguments, an error string if defined and a new context\n//\nKerberos.prototype.authGSSServerInit = function(service, constrained_delegation, username, callback) {\n  if(typeof(constrained_delegation) === 'function') {\n\t  callback = constrained_delegation;\n\t  constrained_delegation = false;\n\t  username = null;\n  }\n\n  if (typeof(constrained_delegation) === 'string') {\n\t  throw new Error(\"S4U2Self protocol transation is not possible without enabling constrained delegation\");\n  }\n\n  if (typeof(username) === 'function') {\n\t  callback = username;\n\t  username = null;\n  }\n\n  constrained_delegation = !!constrained_delegation;\n  \n  return this._native_kerberos.authGSSServerInit(service, constrained_delegation, username, callback);\n};\n\n//callback takes one argument, an error string if defined.\nKerberos.prototype.authGSSServerClean = function(context, callback) {\n  return this._native_kerberos.authGSSServerClean(context, callback);\n};\n\n// authData should be the base64 encoded authentication data obtained\n// from client, e.g., in the Authorization header (without the leading \n// \"Negotiate \" string) during SPNEGO authentication.  The authenticated user \n// is available in context.username after successful authentication.\n// callback takes one argument, an error string if defined.\n//\n// Note: when S4U2Self protocol transition was requested in the authGSSServerInit\n// no actual authentication will be performed and authData will be ignored.\n//\nKerberos.prototype.authGSSServerStep = function(context, authData, callback) {\n  return this._native_kerberos.authGSSServerStep(context, authData, callback);\n};\n\n// authenticate the username and password against the KDC, and verify the KDC using a local\n// service key stored in the keytab.  See above for details on providing the keytab.\n// The service should be the service principal name for a key available in the local keytab,\n// e.g. HTTP/somehost.example.com.  If service is an empty tring, KDC verification will\n// be skipped.  DON'T DO THIS - it's a possible security vulnerability if an attacker\n// can spoof your KDC  (see: https://github.com/qesuto/node-krb5/issues/13)\n// callback receives error and boolean\nKerberos.prototype.authUserKrb5Password = function(username, password, service, callback) {\n    return this._native_kerberos.authUserKrb5Password(username, password, service, callback);\n};\n\nKerberos.prototype.acquireAlternateCredentials = function(user_name, password, domain) {\n  return this._native_kerberos.acquireAlternateCredentials(user_name, password, domain); \n}\n\nKerberos.prototype.prepareOutboundPackage = function(principal, inputdata) {\n  return this._native_kerberos.prepareOutboundPackage(principal, inputdata); \n}\n\nKerberos.prototype.decryptMessage = function(challenge) {\n  return this._native_kerberos.decryptMessage(challenge);\n}\n\nKerberos.prototype.encryptMessage = function(challenge) {\n  return this._native_kerberos.encryptMessage(challenge); \n}\n\nKerberos.prototype.queryContextAttribute = function(attribute) {\n  if(typeof attribute != 'number' && attribute != 0x00) throw new Error(\"Attribute not supported\");\n  return this._native_kerberos.queryContextAttribute(attribute);\n}\n\n// Some useful result codes\nKerberos.AUTH_GSS_CONTINUE     = 0;\nKerberos.AUTH_GSS_COMPLETE     = 1;\n     \n// Some useful gss flags \nKerberos.GSS_C_DELEG_FLAG      = 1;\nKerberos.GSS_C_MUTUAL_FLAG     = 2;\nKerberos.GSS_C_REPLAY_FLAG     = 4;\nKerberos.GSS_C_SEQUENCE_FLAG   = 8;\nKerberos.GSS_C_CONF_FLAG       = 16; \nKerberos.GSS_C_INTEG_FLAG      = 32;\nKerberos.GSS_C_ANON_FLAG       = 64;\nKerberos.GSS_C_PROT_READY_FLAG = 128; \nKerberos.GSS_C_TRANS_FLAG      = 256;\n\n// Export Kerberos class\nexports.Kerberos = Kerberos;\n\n// If we have SSPI (windows)\nif(kerberos.SecurityCredentials) {\n  // Put all SSPI classes in it's own namespace\n  exports.SSIP = {\n      SecurityCredentials: require('./win32/wrappers/security_credentials').SecurityCredentials\n    , SecurityContext: require('./win32/wrappers/security_context').SecurityContext\n    , SecurityBuffer: require('./win32/wrappers/security_buffer').SecurityBuffer\n    , SecurityBufferDescriptor: require('./win32/wrappers/security_buffer_descriptor').SecurityBufferDescriptor\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-kerberos/node_modules/kerberos/lib/auth_processes/mongodb.js":"var format = require('util').format,\n  dns = require('dns');\n\nvar MongoAuthProcess = function(host, port, service_name, options) {\n  // Check what system we are on\n  if(process.platform == 'win32') {\n    this._processor = new Win32MongoProcessor(host, port, service_name, options);\n  } else {\n    this._processor = new UnixMongoProcessor(host, port, service_name, options);\n  }\n}\n\nMongoAuthProcess.prototype.init = function(username, password, callback) {\n  this._processor.init(username, password, callback);\n}\n\nMongoAuthProcess.prototype.transition = function(payload, callback) {\n  this._processor.transition(payload, callback);\n}\n\n/*******************************************************************\n *\n * Win32 SSIP Processor for MongoDB\n *\n *******************************************************************/\nvar Win32MongoProcessor = function(host, port, service_name, options) {\n  options = options || {};\n  this.host = host;\n  this.port = port\n\n  // Set up service name\n  service_name = service_name || \"mongodb\";\n  // Options\n  this.gssapiServiceName = options.gssapiServiceName || service_name;\n  this.gssapiServiceRealm = options.gssapiServiceRealm;\n  this.gssapiCanonicalizeHostName = typeof options.gssapiCanonicalizeHostName == 'boolean' ? options.gssapiCanonicalizeHostName : false;\n  // SSIP classes\n  this.ssip = require(\"../kerberos\").SSIP;\n  // Set up first transition\n  this._transition = Win32MongoProcessor.first_transition(this);\n  // Number of retries\n  this.retries = 10;\n}\n\nWin32MongoProcessor.prototype.init = function(username, password, callback) {\n  var self = this;\n  // Save the values used later\n  this.username = username;\n  this.password = password;\n\n  // Canonicialize host name if needed\n  var performGssapiCanonicalizeHostName = function(gssapiCanonicalizeHostName, host, callback) {\n    if(!gssapiCanonicalizeHostName) return callback();\n\n    // Attempt to resolve the host name\n    dns.resolveCname(host, function(err, r) {\n      if(err) return callback(err);\n      // Get the first resolve host id\n      if(Array.isArray(r) && r.length > 0) {\n        self.host = r[0];\n      }\n\n      callback();\n    });\n  }\n\n  // Canonicialize host name if needed\n  performGssapiCanonicalizeHostName(this.gssapiCanonicalizeHostName, this.host, function(err) {\n    if(err) return callback(err);\n    // Acquire credentials\n    self.ssip.SecurityCredentials.aquire_kerberos(username, password, function(err, security_credentials) {\n      if(err) return callback(err);\n\n      // Set up target\n      self.target = format(\"%s/%s\", self.gssapiServiceName, self.host);\n\n      // Do we have a service realm\n      if(self.gssapiServiceRealm) {\n        self.target = format(\"%s@%s\", self.target, self.gssapiServiceRealm);\n      }\n\n      // Save credentials\n      self.security_credentials = security_credentials;\n      // Callback with success\n      callback(null);\n    });\n  });\n}\n\nWin32MongoProcessor.prototype.transition = function(payload, callback) {\n  if(this._transition == null) return callback(new Error(\"Transition finished\"));\n  this._transition(payload, callback);\n}\n\nWin32MongoProcessor.first_transition = function(self) {\n  return function(payload, callback) {\n    self.ssip.SecurityContext.initialize(\n      self.security_credentials,\n      self.target,\n      payload, function(err, security_context) {\n        if(err) return callback(err);\n\n        // If no context try again until we have no more retries\n        if(!security_context.hasContext) {\n          if(self.retries == 0) return callback(new Error(\"Failed to initialize security context\"));\n          // Update the number of retries\n          self.retries = self.retries - 1;\n          // Set next transition\n          return self.transition(payload, callback);\n        }\n\n        // Set next transition\n        self._transition = Win32MongoProcessor.second_transition(self);\n        self.security_context = security_context;\n        // Return the payload\n        callback(null, security_context.payload);\n    });\n  }\n}\n\nWin32MongoProcessor.second_transition = function(self) {\n  return function(payload, callback) {\n    // Perform a step\n    self.security_context.initialize(self.target, payload, function(err, security_context) {\n      if(err) return callback(err);\n\n      // If no context try again until we have no more retries\n      if(!security_context.hasContext) {\n        if(self.retries == 0) return callback(new Error(\"Failed to initialize security context\"));\n        // Update the number of retries\n        self.retries = self.retries - 1;\n        // Set next transition\n        self._transition = Win32MongoProcessor.first_transition(self);\n        // Retry\n        return self.transition(payload, callback);\n      }\n\n      // Set next transition\n      self._transition = Win32MongoProcessor.third_transition(self);\n      // Return the payload\n      callback(null, security_context.payload);\n    });\n  }\n}\n\nWin32MongoProcessor.third_transition = function(self) {\n  return function(payload, callback) {\n    var messageLength = 0;\n    // Get the raw bytes\n    var encryptedBytes = new Buffer(payload, 'base64');\n    var encryptedMessage = new Buffer(messageLength);\n    // Copy first byte\n    encryptedBytes.copy(encryptedMessage, 0, 0, messageLength);\n    // Set up trailer\n    var securityTrailerLength = encryptedBytes.length - messageLength;\n    var securityTrailer = new Buffer(securityTrailerLength);\n    // Copy the bytes\n    encryptedBytes.copy(securityTrailer, 0, messageLength, securityTrailerLength);\n\n    // Types used\n    var SecurityBuffer = self.ssip.SecurityBuffer;\n    var SecurityBufferDescriptor = self.ssip.SecurityBufferDescriptor;\n\n    // Set up security buffers\n    var buffers = [\n        new SecurityBuffer(SecurityBuffer.DATA, encryptedBytes)\n      , new SecurityBuffer(SecurityBuffer.STREAM, securityTrailer)\n    ];\n\n    // Set up the descriptor\n    var descriptor = new SecurityBufferDescriptor(buffers);\n\n    // Decrypt the data\n    self.security_context.decryptMessage(descriptor, function(err, security_context) {\n      if(err) return callback(err);\n\n      var length = 4;\n      if(self.username != null) {\n        length += self.username.length;\n      }\n\n      var bytesReceivedFromServer = new Buffer(length);\n      bytesReceivedFromServer[0] = 0x01;  // NO_PROTECTION\n      bytesReceivedFromServer[1] = 0x00;  // NO_PROTECTION\n      bytesReceivedFromServer[2] = 0x00;  // NO_PROTECTION\n      bytesReceivedFromServer[3] = 0x00;  // NO_PROTECTION\n\n      if(self.username != null) {\n        var authorization_id_bytes = new Buffer(self.username, 'utf8');\n        authorization_id_bytes.copy(bytesReceivedFromServer, 4, 0);\n      }\n\n      self.security_context.queryContextAttributes(0x00, function(err, sizes) {\n        if(err) return callback(err);\n\n        var buffers = [\n            new SecurityBuffer(SecurityBuffer.TOKEN, new Buffer(sizes.securityTrailer))\n          , new SecurityBuffer(SecurityBuffer.DATA, bytesReceivedFromServer)\n          , new SecurityBuffer(SecurityBuffer.PADDING, new Buffer(sizes.blockSize))\n        ]\n\n        var descriptor = new SecurityBufferDescriptor(buffers);\n\n        self.security_context.encryptMessage(descriptor, 0x80000001, function(err, security_context) {\n          if(err) return callback(err);\n          callback(null, security_context.payload);\n        });\n      });\n    });\n  }\n}\n\n/*******************************************************************\n *\n * UNIX MIT Kerberos processor\n *\n *******************************************************************/\nvar UnixMongoProcessor = function(host, port, service_name, options) {\n  options = options || {};\n  this.host = host;\n  this.port = port\n  // SSIP classes\n  this.Kerberos = require(\"../kerberos\").Kerberos;\n  this.kerberos = new this.Kerberos();\n  // Set up service name\n  service_name = service_name || \"mongodb\";\n  // Options\n  this.gssapiServiceName = options.gssapiServiceName || service_name;\n  this.gssapiServiceRealm = options.gssapiServiceRealm;\n  this.gssapiCanonicalizeHostName = typeof options.gssapiCanonicalizeHostName == 'boolean' ? options.gssapiCanonicalizeHostName : false;\n  // Set up first transition\n  this._transition = UnixMongoProcessor.first_transition(this);\n  // Set up target\n  this.target = format(\"%s@%s\", service_name, host);\n  // Number of retries\n  this.retries = 10;\n}\n\nUnixMongoProcessor.prototype.init = function(username, password, callback) {\n  var self = this;\n  this.username = username;\n  this.password = password;\n\n  // Canonicialize host name if needed\n  var performGssapiCanonicalizeHostName = function(gssapiCanonicalizeHostName, host, callback) {\n    if(!gssapiCanonicalizeHostName) return callback();\n\n    // Attempt to resolve the host name\n    dns.resolveCname(host, function(err, r) {\n      if(err) return callback(err);\n      // Get the first resolve host id\n      if(Array.isArray(r) && r.length > 0) {\n        self.host = r[0];\n      }\n\n      callback();\n    });\n  }\n\n  // Canonicialize host name if needed\n  performGssapiCanonicalizeHostName(this.gssapiCanonicalizeHostName, this.host, function(err) {\n    if(err) return callback(err);\n\n    // Set up target\n    self.target = format(\"%s@%s\", self.gssapiServiceName, self.host);\n\n    // Call client initiate\n    self.kerberos.authGSSClientInit(\n        self.target\n      , self.Kerberos.GSS_C_MUTUAL_FLAG, function(err, context) {\n        self.context = context;\n        // Return the context\n        callback(null, context);\n    });\n  });\n}\n\nUnixMongoProcessor.prototype.transition = function(payload, callback) {\n  if(this._transition == null) return callback(new Error(\"Transition finished\"));\n  this._transition(payload, callback);\n}\n\nUnixMongoProcessor.first_transition = function(self) {\n  return function(payload, callback) {\n    self.kerberos.authGSSClientStep(self.context, '', function(err, result) {\n      if(err) return callback(err);\n      // Set up the next step\n      self._transition = UnixMongoProcessor.second_transition(self);\n      // Return the payload\n      callback(null, self.context.response);\n    })\n  }\n}\n\nUnixMongoProcessor.second_transition = function(self) {\n  return function(payload, callback) {\n    self.kerberos.authGSSClientStep(self.context, payload, function(err, result) {\n      if(err && self.retries == 0) return callback(err);\n      // Attempt to re-establish a context\n      if(err) {\n        // Adjust the number of retries\n        self.retries = self.retries - 1;\n        // Call same step again\n        return self.transition(payload, callback);\n      }\n\n      // Set up the next step\n      self._transition = UnixMongoProcessor.third_transition(self);\n      // Return the payload\n      callback(null, self.context.response || '');\n    });\n  }\n}\n\nUnixMongoProcessor.third_transition = function(self) {\n  return function(payload, callback) {\n    // GSS Client Unwrap\n    self.kerberos.authGSSClientUnwrap(self.context, payload, function(err, result) {\n      if(err) return callback(err, false);\n\n      // Wrap the response\n      self.kerberos.authGSSClientWrap(self.context, self.context.response, self.username, function(err, result) {\n        if(err) return callback(err, false);\n        // Set up the next step\n        self._transition = UnixMongoProcessor.fourth_transition(self);\n        // Return the payload\n        callback(null, self.context.response);\n      });\n    });\n  }\n}\n\nUnixMongoProcessor.fourth_transition = function(self) {\n  return function(payload, callback) {\n    // Clean up context\n    self.kerberos.authGSSClientClean(self.context, function(err, result) {\n      if(err) return callback(err, false);\n      // Set the transition to null\n      self._transition = null;\n      // Callback with valid authentication\n      callback(null, true);\n    });\n  }\n}\n\n// Set the process\nexports.MongoAuthProcess = MongoAuthProcess;\n","/home/travis/build/npmtest/node-npmtest-kerberos/node_modules/kerberos/lib/sspi.js":"// Load the native SSPI classes\nvar kerberos = require('../build/Release/kerberos')\n  , Kerberos = kerberos.Kerberos\n  , SecurityBuffer = require('./win32/wrappers/security_buffer').SecurityBuffer\n  , SecurityBufferDescriptor = require('./win32/wrappers/security_buffer_descriptor').SecurityBufferDescriptor\n  , SecurityCredentials = require('./win32/wrappers/security_credentials').SecurityCredentials\n  , SecurityContext = require('./win32/wrappers/security_context').SecurityContext;\nvar SSPI = function() {\n}\n\nexports.SSPI = SSPI;\nexports.SecurityBuffer = SecurityBuffer;\nexports.SecurityBufferDescriptor = SecurityBufferDescriptor;\nexports.SecurityCredentials = SecurityCredentials;\nexports.SecurityContext = SecurityContext;","/home/travis/build/npmtest/node-npmtest-kerberos/node_modules/kerberos/lib/win32/wrappers/security_buffer.js":"var SecurityBufferNative = require('../../../build/Release/kerberos').SecurityBuffer;\n\n// Add some attributes\nSecurityBufferNative.VERSION  = 0;\nSecurityBufferNative.EMPTY    = 0;\nSecurityBufferNative.DATA     = 1;\nSecurityBufferNative.TOKEN    = 2;\nSecurityBufferNative.PADDING  = 9;\nSecurityBufferNative.STREAM   = 10;\n\n// Export the modified class\nexports.SecurityBuffer = SecurityBufferNative;","/home/travis/build/npmtest/node-npmtest-kerberos/node_modules/kerberos/lib/win32/wrappers/security_buffer_descriptor.js":"var SecurityBufferDescriptorNative = require('../../../build/Release/kerberos').SecurityBufferDescriptor;\n// Export the modified class\nexports.SecurityBufferDescriptor = SecurityBufferDescriptorNative;","/home/travis/build/npmtest/node-npmtest-kerberos/node_modules/kerberos/lib/win32/wrappers/security_context.js":"var SecurityContextNative = require('../../../build/Release/kerberos').SecurityContext;\n// Export the modified class\nexports.SecurityContext = SecurityContextNative;","/home/travis/build/npmtest/node-npmtest-kerberos/node_modules/kerberos/lib/win32/wrappers/security_credentials.js":"var SecurityCredentialsNative = require('../../../build/Release/kerberos').SecurityCredentials;\n\n// Add simple kebros helper\nSecurityCredentialsNative.aquire_kerberos = function(username, password, domain, callback) {\n  if(typeof password == 'function') {\n    callback = password;\n    password = null;\n  } else if(typeof domain == 'function') {\n    callback = domain;\n    domain = null;\n  }\n\n  // We are going to use the async version\n  if(typeof callback == 'function') {\n    return SecurityCredentialsNative.acquire('Kerberos', username, password, domain, callback);\n  } else {\n    return SecurityCredentialsNative.aquireSync('Kerberos', username, password, domain);\n  }\n}\n\n// Export the modified class\nexports.SecurityCredentials = SecurityCredentialsNative;"}